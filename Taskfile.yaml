version: '3'

dotenv: ['.env']

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  initdb:
    desc: Run PostgreSQL container with env vars
    cmds:
      - docker run --name seta-training \
          -e POSTGRES_PASSWORD={{.POSTGRES_PASSWORD}} \
          -e POSTGRES_USER={{.POSTGRES_USER}} \
          -p {{.POSTGRES_PORT}}:5432 \
          -d postgres:13.21-alpine3.21

  createdb:
    desc: Create a new PostgreSQL database inside the running container
    cmds:
      - docker exec -it seta-training createdb --username={{.POSTGRES_USER}} --owner={{.POSTGRES_USER}} {{.POSTGRES_DB}}

  dropdb:
    desc: Drop the PostgreSQL database if it exists
    cmds:
      - docker exec -it seta-training dropdb --username={{.POSTGRES_USER}} --if-exists {{.POSTGRES_DB}}

  resetdb:
    desc: Reset the PostgreSQL database by dropping and recreating it
    cmds:
      - task dropdb
      - task createdb

  dump-schema:
    desc: Dump the schema of the PostgreSQL database to a file
    cmds:
      - docker exec -t seta-training pg_dump -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}} --schema-only > internal/db/schema_dump.sql

  migrate:
    desc: Run database migrations
    cmds:
      - go run cmd/migrate/main.go

  gqlgen:
    desc: Generate GraphQL server code using gqlgen
    cmds:
      - gqlgen generate

  server:
    cmds:
      - go run cmd/server/server.go

  seedusers:
    desc: Seed 2 test users
    cmds:
      - |
        curl -X POST http://localhost:8080/graphQL \
          -H "Content-Type: application/json" \
          -d '{"query":"mutation { createUser(input: {username: \"member1\", email: \"member1@gmail.com\", role: MEMBER, password: \"member1\"}) { user {userId} } }"}'
      - |
        curl -X POST http://localhost:8080/graphQL \
          -H "Content-Type: application/json" \
          -d '{"query":"mutation { createUser(input: {username: \"manager1\", email: \"manager1@gmail.com\", role: MANAGER, password: \"manager1\"}) { user {userId} } }"}'
  
  gentoken:
    desc: Generate tokens and save to token.json
    cmds:
      - echo "Lấy token cho member1..."
      - |
        curl -s -X POST http://localhost:8080/graphQL \
          -H "Content-Type: application/json" \
          -d '{"query":"mutation { login(input: { email: \"member1@gmail.com\", password: \"member1\"}) { accessToken } }"}' \
          > member_response.json
      - echo "member1 response:" && cat member_response.json

      - echo "Lấy token cho manager1..."
      - |
        curl -s -X POST http://localhost:8080/graphQL \
          -H "Content-Type: application/json" \
          -d '{"query":"mutation { login(input: { email: \"manager1@gmail.com\", password: \"manager1\"}) { accessToken } }"}' \
          > manager_response.json
      - echo "manager1 response:" && cat manager_response.json

      - |
        TOKEN_MEMBER=$(cat member_response.json | sed -n 's/.*"accessToken":"\([^"]*\)".*/\1/p')
        TOKEN_MANAGER=$(cat manager_response.json | sed -n 's/.*"accessToken":"\([^"]*\)".*/\1/p')
        echo -e "{\n  \"member\": \"${TOKEN_MEMBER}\",\n  \"manager\": \"${TOKEN_MANAGER}\"\n}" > token.json
        rm -f member_response.json manager_response.json
