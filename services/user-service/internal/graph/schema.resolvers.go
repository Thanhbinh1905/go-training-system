package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	model1 "github.com/Thanhbinh1905/go-training-system/services/user-service/internal/model"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model1.CreateUserInput) (*model1.UserMutationResponse, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id uuid.UUID, input model1.UpdateUserInput) (*model1.UserMutationResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model1.UserInput) (*model1.AuthMutationResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination *model1.UserPaginationInput) (*model1.PaginatedUsers, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model1.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// VerifyToken is the resolver for the verifyToken field.
func (r *queryResolver) VerifyToken(ctx context.Context, input model1.TokenInput) (*model1.TokenValidationResponse, error) {
	panic(fmt.Errorf("not implemented: VerifyToken - verifyToken"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model1.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, teamID uuid.UUID) (*model1.Team, error) {
	panic(fmt.Errorf("not implemented: Team - team"))
}

// MyTeams is the resolver for the myTeams field.
func (r *queryResolver) MyTeams(ctx context.Context) ([]*model1.Team, error) {
	panic(fmt.Errorf("not implemented: MyTeams - myTeams"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
